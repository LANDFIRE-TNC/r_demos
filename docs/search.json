[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "LANDFIRE R Demos",
    "section": "",
    "text": "We are excited to share some R code bits that we think will help you in your use of LANDFIRE data to assess and visualize ecological patterns on your landscape Over time we will be adding pages that present code we have developed over time for several LANDFIRE datasets including:\nWe share these bits of code in hopes of not only helping you accelerate your use of LANDFIRE data, but also as a way to start a conversation. We’d love to hear your suggestions, and stories of LANDFIRE data processing with R!"
  },
  {
    "objectID": "index.html#how-to-use-this-web-report",
    "href": "index.html#how-to-use-this-web-report",
    "title": "LANDFIRE R Demos",
    "section": "How to use this web report",
    "text": "How to use this web report\n\nAll maps, input datasets and further assistance can be obtained by contacting the author, Randy Swaty.\nReview is ongoing.\nTo share this web app, simply share the hyperlink.\nToggle between dark and light display of this site in the upper right corner of the page.\nLearn more about LANDFIRE and The Nature Conservancy here."
  },
  {
    "objectID": "bps.html",
    "href": "bps.html",
    "title": "Biophysical Settings (BpS) Data",
    "section": "",
    "text": "We use LANDFIRE’s Biophysical Settings (BpS) data to help us understand the potential of a landscape.\n\nBiophysical Settings represent the vegetation system that may have been dominant on the landscape prior to Euro-American settlement. These models are based on a combination of the current environment and an approximation of the historical disturbance regime. Read more."
  },
  {
    "objectID": "bps.html#landfire-biophysical-settings-data",
    "href": "bps.html#landfire-biophysical-settings-data",
    "title": "Biophysical Settings (BpS) Data",
    "section": "",
    "text": "We use LANDFIRE’s Biophysical Settings (BpS) data to help us understand the potential of a landscape.\n\nBiophysical Settings represent the vegetation system that may have been dominant on the landscape prior to Euro-American settlement. These models are based on a combination of the current environment and an approximation of the historical disturbance regime. Read more."
  },
  {
    "objectID": "bps.html#skills-learned",
    "href": "bps.html#skills-learned",
    "title": "Biophysical Settings (BpS) Data",
    "section": "Skills learned",
    "text": "Skills learned\nOften we want to summarize and visualize spatial data, which can be challenging. Making a simple bar chart is not too hard, but what about making an accessible map that might have several categories (of ecosystems for example), is attractive and is ‘scale appropriate’ in level of detail. Below we make that simple bar chanrt, and also present one way to summarize and map categorical raster data in R, using BpS data.\n\nDownload LANDFIRE Biophysical Settings (BpS) data, manage and load into R\nCrop, mask and build attribute table for the area\nMake a simple bar chart of the top BpSs\nMake an interactive hexbin map\n\n\nSet up\nTo run the code below you will need to:\n\nSet up a new R-Studio project\nCreate two directories, “inputs” and “outputs”\nDownload the following and place into the “inputs” directory (click Download button to the right of the “Raw” button in the top right corner)\n\nzipped shapefile of our demonstration area (unzip into “inputs” directory)\n.csv file of BpS attributes\n\n\nOr, download the Git Repo.\n\n# install packages if needed\n  # install.packages(\"exactextractr\")\n  # install.packages(\"foreign\")\n  # install.packages(\"leaflet\")\n  # install.packages(\"rlandfire\")\n  # install.packages(\"sf\")\n  # install.packages(\"terra\")\n  # install.packages(\"tidyverse\")\n\n# load packages\nlibrary(exactextractr)\nlibrary(foreign)\nlibrary(leaflet)\nlibrary(rlandfire)\nlibrary(sf)\nlibrary(terra)\nlibrary(tidyverse)\n\n\n# read in Area of Interest (aoi) shapefile, plot to check\n\nshp &lt;- st_read(\"inputs/map_zone_35.shp\", quiet = TRUE) %&gt;% \n  st_transform(crs = 5070) %&gt;%\n  st_union() %&gt;%\n  st_sf()\n\n\n# read in .csv of CONUS-wide attributes\n\nbps_conus_atts &lt;- read_csv(\"inputs/LF20_BPS_220.csv\")\n\n\n# set landscape name---not really needed here but useful if working with many datasets and need to make multiple charts with the same landscape name for example\nlandscape_name &lt;- \"LANDFIRE Map Zone 35 (central Texas)\"\n\n# create an accessible pallette (from https://thenode.biologists.com/data-visualization-with-flying-colors/research/)\ncustom_palette &lt;- c(\"#E69F00\", \"#56B4E9\", \"#009E73\", \"#F0E442\", \"#0072B2\", \"#D55E00\", \"#CC79A7\", \"#999999\", \"#E6AB02\", \"#F4A582\")\n\n# plot the shape for fun\nplot(shp)\n\n\n\n\n\n\n\n# look at the first few rows of the CONUS-wide attribute table\nhead(bps_conus_atts)\n\n\n\nDownload manage and load data\nTo obtain and manage LANDFIRE data we need to:\n\nDefine the Area of Interest (AOI): The code gets the area of interest from a shapefile.\nSet Parameters for the API Call: It specifies the product code, coordinate system (EPSG:4326), resolution (30 meters), and your email address for the API.\nCreate a Temporary File: A temporary file is created to save the downloaded data.\nCall the LANDFIRE API: The API is called with the specified parameters, and the data is saved to the temporary file.\nMake sure the downloaded data lands in a place where you can find and use it easily\n\nDefine the Destination Path: The destination path for the downloaded file is set.\nMove and Rename the File: The temporary file is moved to the destination path and renamed.\nCreate a Temporary Directory for Unzipping: A temporary directory is created to unzip the downloaded file.\nUnzip the File: The file is unzipped into the temporary directory.\nGet the List of Unzipped Files: A list of unzipped files is obtained.\nRename Each Unzipped File: Each unzipped file is renamed to “landfire_data” followed by its original extension.\nClean Up the Temporary Directory: The temporary directory and its contents are deleted.\n\n\nFinally we load the data into R.\nThe code below does that in roughly 2 minutes with an internet download speed of ~450mbs. Your times may vary.\n```{r}\n#| label: Download manage and load data\n#| echo: true\n#| message: false\n#| warning: false\n#| code-overflow: wrap\n#| include: true\n#| results: hide\n\naoi &lt;- getAOI(shp)\n\nproducts &lt;-  c(\"200BPS\")\nprojection &lt;- 5070  \nresolution &lt;- 30\nemail &lt;- \"rswaty@tnc.org\" # Replace with your email address. \n\n# R specific arguments\nsave_file &lt;- tempfile(fileext = \".zip\")\n\n# call API\nncal &lt;- landfireAPIv2(\n  products, \n  aoi, \n  projection, \n  resolution, \n  path = save_file,\n  email = email)\n\n\n# define the destination path\ndest_file &lt;- file.path(\"inputs\", \"landfire_data.zip\")\n\n# move and rename the file\nfile.rename(save_file, dest_file)\n\n# create a temporary directory for unzipping\ntemp_dir &lt;- tempfile()\ndir.create(temp_dir)\n\n# unzip the file into the temporary directory\nunzip(dest_file, exdir = temp_dir)\n\n# get the list of unzipped files\nunzipped_files &lt;- list.files(temp_dir, full.names = TRUE)\n\n# rename each unzipped file to \"landfire_data\" with its full original extension\nfor (file in unzipped_files) {\n  file_name &lt;- basename(file)\n  file_extension &lt;- sub(\"^[^.]*\", \"\", file_name)  # Extract the full extension\n  new_file_path &lt;- file.path(\"inputs\", paste0(\"landfire_data\", file_extension))\n  file.rename(file, new_file_path)\n}\n\n# clean up the temporary directory\nunlink(temp_dir, recursive = TRUE)\n\n\n\n```\n\n\nCrop, mask and build attribute table for the area\nNow that we have the BpS data for the extent of our area of interest, we need to crop/mask it to the exact area of interest, build the raster attribute table and do a few calculations:\n\nFirst, we load our stacked raster data from the file landfire_data.tif.\nNext, we crop and mask this raster using a shapefile to focus on our area of interest.\nWe then plot the cropped and masked raster to visualize our area of interest.\nWe set the levels of the raster to match our attribute data and specify the active category.\n\nExtracting and Processing Values: We extract values from the raster, remove any NA values, and convert the data into a dataframe. This dataframe is then processed to create a frequency table, which is further refined and joined with the raster categories.\nSaving the Results: Finally, we save the processed raster and the attributes dataframe to files for future use.\n\n# load downloaded stacked raster\nUS_200BPS &lt;- rast(\"inputs/landfire_data.tif\")\n\n\n# crop and mask the us_200bps raster using the shapefile\nbps_aoi &lt;- US_200BPS %&gt;%\n  crop(shp) %&gt;%\n  mask(shp)\n\n# set the levels of the raster to bps_conus_atts\nlevels(bps_aoi)[[1]] &lt;- bps_conus_atts\n# set the active category of the raster to \"value\"\nactiveCat(bps_aoi) &lt;- \"VALUE\"\n\n# extract values from the raster, remove na values, and convert to dataframe\nbps_aoi_atts &lt;- values(bps_aoi, dataframe = T, na.rm = T) %&gt;%\n  # create a frequency table of the values\n  table(dnn = \"VALUE\") %&gt;%\n  # convert the table to a dataframe\n  as.data.frame() %&gt;%\n  # convert all columns to character type\n  mutate_all(as.character) %&gt;%\n  # convert all columns to integer type\n  mutate_all(as.integer) %&gt;%\n  # join the dataframe with the raster categories\n  left_join(cats(bps_aoi)[[1]], by = \"VALUE\") %&gt;%\n  # filter out rows with a frequency of 0\n  filter(Freq != 0) %&gt;%\n  # calculate acres and relative percentage\n  mutate(ACRES = round((Freq * 900 / 4046.86), 0),\n         REL_PERCENT = round((Freq / sum(Freq)), 3) * 100) %&gt;%\n  # arrange the dataframe by relative percentage in descending order\n  arrange(desc(REL_PERCENT))\n\n# write the raster to a file with specified options\nwriteRaster(bps_aoi, \"outputs/bps_aoi.tif\",\n            gdal = c(\"COMPRESS=NONE\", \"TFW=YES\"),\n            datatype = \"INT2S\",\n            overwrite = T)\n\n# write the attributes dataframe to a dbf file\nwrite.dbf(bps_aoi_atts, \"outputs/bps_aoi.tif.vat.dbf\")\n\n# write the attributes dataframe to a csv file\nwrite.csv(bps_aoi_atts, \"outputs/bps_aoi_attributes.csv\")\n\n# plot the cropped and masked raster\nplot(bps_aoi)\n\n\n\n\n\n\n\n# look at the first few rows of the aoi attributes\nhead(bps_aoi_atts)\n\n\n\nMake a simple bar chart of the top BpSs\n\nbps_name_10 &lt;- bps_aoi_atts %&gt;%\n  group_by(BPS_NAME) %&gt;%\n  summarize(ACRES = sum(ACRES),\n            REL_PERCENT = sum(REL_PERCENT)) %&gt;%\n  arrange(desc(REL_PERCENT)) %&gt;%\n  top_n(n = 10, wt = REL_PERCENT)\n\n# plot\nbps_chart &lt;- \n  ggplot(data = bps_name_10, aes(x = BPS_NAME, y = REL_PERCENT)) +\n  geom_bar(stat = \"identity\", fill = \"#4a4a48\") +\n  coord_flip() +\n  scale_x_discrete(limits = rev(bps_name_10$BPS_NAME)) +\n  theme_bw(base_size = 14) +\n  labs(\n    title = \"Top 10 Biophysical Settings\",\n    subtitle = landscape_name,\n    x = \"\",\n    y = \"Percent\",\n    caption = \"Represents dominant vegetation systems pre-European colonization. \\n Based on LANDFIRE's Biophysical Settings.  Data available at https://www.landfire.gov/viewer. Randy Swaty, Ecologist, rswaty@tnc.org\") +\n  theme(plot.title.position = \"plot\", #NEW parameter. Apply for subtitle too.\n        plot.caption.position =  \"plot\",\n        panel.grid.minor.y = element_blank(),\n        panel.grid.major.y = element_blank())\n  \n\nbps_chart\n\n\n\n\n\n\n\n# if the plot looks good, save it\nggsave(\"outputs/bpsChart.png\", width = 12, height = 5)\n\n\n\nMake Hexbin Map\n\n# Calculate the side length for hexagons with 200 km² area\nside_length &lt;- sqrt((2 * 200000000) / (3 * sqrt(3)))\n\n# Create a hexagon grid within the shapefile's bounding box\nhex_grid &lt;- st_make_grid(shp, cellsize = side_length, square = FALSE, what = 'polygons')\n\n# Convert the grid to an sf object\nhex_grid &lt;- st_sf(geometry = hex_grid)\n\n# Add an index column to the hexagon grid\nhex_grid &lt;- hex_grid %&gt;%\n  mutate(index = row_number())\n\n\n# Filter hexagons by centroid using st_intersects\nhex_grid &lt;- hex_grid %&gt;%\n filter(lengths(st_intersects(st_centroid(hex_grid), shp)) &gt; 0)\n\n\n# Ensure attributes are correctly handled\nhex_grid &lt;- hex_grid %&gt;%\n st_set_geometry(st_geometry(hex_grid))\n\n\n\n# Perform the exact_extract operation\nbps_majority_hex &lt;- exact_extract(bps_aoi, hex_grid, 'majority', append_cols = \"index\") %&gt;%\n  left_join(select(bps_aoi_atts,\n                   VALUE,\n                   BPS_MODEL,\n                   BPS_NAME),\n            by = c('majority' = 'VALUE'))\n\n\n\n# Join both BpS and EVT attributes to hex shapefile\nhexs_bps&lt;- hex_grid %&gt;%\n  left_join(bps_majority_hex, by = 'index') \n\n\n#| message: false\n#| warning: false\n#| echo: true\n#| fig.width: 10\n#| fig.height: 12\n#| code-overflow: wrap\n\nbps_names &lt;- unique(bps_name_10$BPS_NAME)\n\nbps_colors &lt;- setNames(custom_palette[1:length(bps_names)], bps_names)\n\npal_bps &lt;- colorFactor(\n  palette = bps_colors,\n  domain = hexs_bps$BPS_NAME\n)\n\n\n# Transform the hex_grid to WGS84\nhexs_bps_4326 &lt;- st_transform(hexs_bps, crs = 4326)\n\n\n\nleaflet(hexs_bps_4326) %&gt;%\n  addTiles() %&gt;%\n  #fitBounds(lng1 = bbox_list$xmin, lat1 = bbox_list$ymin, lng2 = bbox_list$xmax, lat2 = bbox_list$ymax) %&gt;%\n  addPolygons(\n    fillColor = ~pal_bps(BPS_NAME),\n    color = \"#BDBDC3\",\n    weight = 1,\n    opacity = 1,\n    fillOpacity = 1.0,\n    highlightOptions = highlightOptions(\n      weight = 2,\n      color = \"#666\",\n      fillOpacity = 1.0,\n      bringToFront = TRUE\n    ),\n    label = ~BPS_NAME,\n    labelOptions = labelOptions(\n      style = list(\"font-weight\" = \"normal\", padding = \"3px 8px\"),\n      textsize = \"15px\",\n      direction = \"auto\"\n    )\n  ) %&gt;%\n  addScaleBar(position = \"bottomleft\", options = scaleBarOptions(metric = TRUE, imperial = FALSE))"
  }
]