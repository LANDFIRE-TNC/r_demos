---
title: "Biophysical Settings (BpS) Data"
format: html

---

## LANDFIRE Biophysical Settings Data

Brief description

Links to resources

## Skills learned

1.  Download LANDFIRE Biophysical Settings (BpS) data, manage and load into R
2.  Crop, mask and build attribute table for the area
3.  Make a simple bar chart of the top BpSs
4.  Make an interactive hexbin map

### Set up

```{r}
#| label: Set up
#| message: false
#| warning: false
#| echo: true
#| results: "hide"


# install packages if needed
  # install.packages("exactextractr")
  # install.packages("foreign")
  # install.packages("leaflet")
  # install.packages("rlandfire")
  # install.packages("sf")
  # install.packages("terra")
  # install.packages("tidyverse")

# load packages
library(exactextractr)
library(foreign)
library(leaflet)
library(rlandfire)
library(sf)
library(terra)
library(tidyverse)


# read in Area of Interest (aoi) shapefile, plot to check

shp <- st_read("inputs/map_zone_35.shp", quiet = TRUE) %>% 
  st_transform(crs = 5070) %>%
  st_union() %>%
  st_sf()


plot(shp)

# read in .csv of CONUS-wide attributes

bps_conus_atts <- read_csv("inputs/LF20_BPS_220.csv")


# set landscape name---not really needed here but useful if working with many datasets and need to make multiple charts with the same landscape name for example
landscape_name <- "LANDFIRE Map Zone 35 (central Texas)"


custom_palette <- c("#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7", "#999999", "#E6AB02", "#F4A582")
```

### Download manage and load data

To obtain and manage LANDFIRE data we need to:

-   Define the Area of Interest (AOI): The code gets the area of interest from a shapefile.
-   Set Parameters for the API Call: It specifies the product code, coordinate system (EPSG:4326), resolution (30 meters), and your email address for the API.
-   Create a Temporary File: A temporary file is created to save the downloaded data.
-   Call the LANDFIRE API: The API is called with the specified parameters, and the data is saved to the temporary file.
-   Make sure the downloaded data lands in a place where you can find and use it easily
    -   Define the Destination Path: The destination path for the downloaded file is set.
    -   Move and Rename the File: The temporary file is moved to the destination path and renamed.
    -   Create a Temporary Directory for Unzipping: A temporary directory is created to unzip the downloaded file.
    -   Unzip the File: The file is unzipped into the temporary directory.
    -   Get the List of Unzipped Files: A list of unzipped files is obtained.
    -   Rename Each Unzipped File: Each unzipped file is renamed to "landfire_data" followed by its original extension.
    -   Clean Up the Temporary Directory: The temporary directory and its contents are deleted.

Finally we load the data into R.

The code below does that in roughly 2 minutes with an internet download speed of \~450mbs. Your times may very.

```{r}
#| label: Download manage and load data
#| echo: true
#| message: false
#| warning: false
#| include: true
#| results: 'hide'

aoi <- getAOI(shp)

products <-  c("200BPS")
projection <- 5070  
resolution <- 30
email <- "rswaty@tnc.org" # Replace with your email address. LANDFIRE APIv2 requires a valid email address.

# R specific arguments
save_file <- tempfile(fileext = ".zip")

# call API
ncal <- landfireAPIv2(
  products, 
  aoi, 
  projection, 
  resolution, 
  path = save_file,
  email = email)


# define the destination path
dest_file <- file.path("inputs", "landfire_data.zip")

# move and rename the file
file.rename(save_file, dest_file)

# create a temporary directory for unzipping
temp_dir <- tempfile()
dir.create(temp_dir)

# unzip the file into the temporary directory
unzip(dest_file, exdir = temp_dir)

# get the list of unzipped files
unzipped_files <- list.files(temp_dir, full.names = TRUE)

# rename each unzipped file to "landfire_data" with its full original extension
for (file in unzipped_files) {
  file_name <- basename(file)
  file_extension <- sub("^[^.]*", "", file_name)  # Extract the full extension
  new_file_path <- file.path("inputs", paste0("landfire_data", file_extension))
  file.rename(file, new_file_path)
}

# clean up the temporary directory
unlink(temp_dir, recursive = TRUE)


# load downloaded stacked raster
US_200BPS <- rast("inputs/landfire_data.tif")




```

### Crop, mask and build attribute table for the area

```{r}
#| label: Crop, mask and build attributes
#| message: false
#| warning: false
#| echo: true
#| results: "hide"


# crop and mask the us_200bps raster using the shapefile
bps_aoi <- US_200BPS %>%
  crop(shp) %>%
  mask(shp)

# plot the cropped and masked raster
plot(bps_aoi)

# set the levels of the raster to bps_conus_atts
levels(bps_aoi)[[1]] <- bps_conus_atts
# set the active category of the raster to "value"
activeCat(bps_aoi) <- "VALUE"

# extract values from the raster, remove na values, and convert to dataframe
bps_aoi_atts <- values(bps_aoi, dataframe = T, na.rm = T) %>%
  # create a frequency table of the values
  table(dnn = "VALUE") %>%
  # convert the table to a dataframe
  as.data.frame() %>%
  # convert all columns to character type
  mutate_all(as.character) %>%
  # convert all columns to integer type
  mutate_all(as.integer) %>%
  # join the dataframe with the raster categories
  left_join(cats(bps_aoi)[[1]], by = "VALUE") %>%
  # filter out rows with a frequency of 0
  filter(Freq != 0) %>%
  # calculate acres and relative percentage
  mutate(ACRES = round((Freq * 900 / 4046.86), 0),
         REL_PERCENT = round((Freq / sum(Freq)), 3) * 100) %>%
  # arrange the dataframe by relative percentage in descending order
  arrange(desc(REL_PERCENT))

# write the raster to a file with specified options
writeRaster(bps_aoi, "outputs/bps_aoi.tif",
            gdal = c("COMPRESS=NONE", "TFW=YES"),
            datatype = "INT2S",
            overwrite = T)

# write the attributes dataframe to a dbf file
write.dbf(bps_aoi_atts, "outputs/bps_aoi.tif.vat.dbf")

# write the attributes dataframe to a csv file
write.csv(bps_aoi_atts, "outputs/bps_aoi_attributes.csv")

    
```

### Make a simple bar chart of the top BpSs

```{r}
#| label: Build simple bar chart
#| message: false
#| warning: false
#| echo: true
#| fig.width: 10
#| fig.height: 10

bps_name_10 <- bps_aoi_atts %>%
  group_by(BPS_NAME) %>%
  summarize(ACRES = sum(ACRES),
            REL_PERCENT = sum(REL_PERCENT)) %>%
  arrange(desc(REL_PERCENT)) %>%
  top_n(n = 10, wt = REL_PERCENT)

# plot
bps_chart <- 
  ggplot(data = bps_name_10, aes(x = BPS_NAME, y = REL_PERCENT)) +
  geom_bar(stat = "identity", fill = "#4a4a48") +
  coord_flip() +
  scale_x_discrete(limits = rev(bps_name_10$BPS_NAME)) +
  theme_bw(base_size = 14) +
  labs(
    title = "Top 10 Biophysical Settings",
    subtitle = landscape_name,
    x = "",
    y = "Percent",
    caption = "Represents dominant vegetation systems pre-European colonization. \n Based on LANDFIRE's Biophysical Settings.  Data available at https://www.landfire.gov/viewer. Randy Swaty, Ecologist, rswaty@tnc.org") +
  theme(plot.title.position = "plot", #NEW parameter. Apply for subtitle too.
        plot.caption.position =  "plot",
        panel.grid.minor.y = element_blank(),
        panel.grid.major.y = element_blank())
  

bps_chart

# if the plot looks good, save it
ggsave("outputs/bpsChart.png", width = 12, height = 5)


```

### Make Hexbin Map

```{r}
#| label: Make hexbins
#| message: false
#| warning: false
#| echo: true
#| results: "hide"


# Calculate the side length for hexagons with 200 kmÂ² area
side_length <- sqrt((2 * 200000000) / (3 * sqrt(3)))

# Create a hexagon grid within the shapefile's bounding box
hex_grid <- st_make_grid(shp, cellsize = side_length, square = FALSE, what = 'polygons')

# Convert the grid to an sf object
hex_grid <- st_sf(geometry = hex_grid)

# Add an index column to the hexagon grid
hex_grid <- hex_grid %>%
  mutate(index = row_number())


# Filter hexagons by centroid using st_intersects
hex_grid <- hex_grid %>%
 filter(lengths(st_intersects(st_centroid(hex_grid), shp)) > 0)


# Ensure attributes are correctly handled
hex_grid <- hex_grid %>%
 st_set_geometry(st_geometry(hex_grid))



# Perform the exact_extract operation
bps_majority_hex <- exact_extract(bps_aoi, hex_grid, 'majority', append_cols = "index") %>%
  left_join(select(bps_aoi_atts,
                   VALUE,
                   BPS_MODEL,
                   BPS_NAME),
            by = c('majority' = 'VALUE'))



# Join both BpS and EVT attributes to hex shapefile
hexs_bps<- hex_grid %>%
  left_join(bps_majority_hex, by = 'index') 


```

```{r}
#| label: Leaflet map of Hexbins

#| message: false
#| warning: false
#| echo: true


#| fig.width: 10
#| fig.height: 10

bps_names <- unique(bps_name_10$BPS_NAME)

bps_colors <- setNames(custom_palette[1:length(bps_names)], bps_names)

pal_bps <- colorFactor(
  palette = bps_colors,
  domain = hexs_bps$BPS_NAME
)


# Transform the hex_grid to WGS84
hexs_bps_4326 <- st_transform(hexs_bps, crs = 4326)



leaflet(hexs_bps_4326) %>%
  addTiles() %>%
  #fitBounds(lng1 = bbox_list$xmin, lat1 = bbox_list$ymin, lng2 = bbox_list$xmax, lat2 = bbox_list$ymax) %>%
  addPolygons(
    fillColor = ~pal_bps(BPS_NAME),
    color = "#BDBDC3",
    weight = 1,
    opacity = 1,
    fillOpacity = 1.0,
    highlightOptions = highlightOptions(
      weight = 2,
      color = "#666",
      fillOpacity = 1.0,
      bringToFront = TRUE
    ),
    label = ~BPS_NAME,
    labelOptions = labelOptions(
      style = list("font-weight" = "normal", padding = "3px 8px"),
      textsize = "15px",
      direction = "auto"
    )
  ) %>%
  addScaleBar(position = "bottomleft", options = scaleBarOptions(metric = TRUE, imperial = FALSE))


```
